#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <string.h>

// Function to demonstrate file creation and writing
void create_and_write_file(const char *filename, const char *text) {
    int fd = open(filename, O_CREAT | O_WRONLY | O_TRUNC, 0644);  // Create or overwrite the file
    if (fd == -1) {
        perror("Failed to open file for writing");
        exit(1);
    }

    ssize_t bytes_written = write(fd, text, strlen(text));  // Write text to file
    if (bytes_written == -1) {
        perror("Failed to write to file");
        close(fd);
        exit(1);
    }

    printf("Successfully wrote %ld bytes to file: %s\n", bytes_written, filename);
    close(fd);  // Close the file after writing
}

// Function to read file content
void read_file(const char *filename) {
    int fd = open(filename, O_RDONLY);  // Open file for reading
    if (fd == -1) {
        perror("Failed to open file for reading");
        exit(1);
    }

    char buffer[256];
    ssize_t bytes_read = read(fd, buffer, sizeof(buffer) - 1);  // Read content from file
    if (bytes_read == -1) {
        perror("Failed to read from file");
        close(fd);
        exit(1);
    }

    buffer[bytes_read] = '\0';  // Null-terminate the string
    printf("Content of the file %s:\n%s\n", filename, buffer);
    close(fd);  // Close the file after reading
}

// Function to display file information
void display_file_info(const char *filename) {
    struct stat file_stat;
    if (stat(filename, &file_stat) == -1) {
        perror("Failed to get file information");
        exit(1);
    }

    printf("\nFile Information for: %s\n", filename);
    printf("File Size: %ld bytes\n", file_stat.st_size);
    printf("File Permissions: %o\n", file_stat.st_mode & 0777);
    printf("Last Access Time: %ld\n", file_stat.st_atime);
    printf("Last Modification Time: %ld\n", file_stat.st_mtime);
    printf("Last Status Change Time: %ld\n", file_stat.st_ctime);
}

// Function to delete a file
void delete_file(const char *filename) {
    if (unlink(filename) == -1) {
        perror("Failed to delete the file");
        exit(1);
    }
    printf("File %s deleted successfully.\n", filename);
}

int main() {
    const char *filename = "example.txt";
    const char *text = "This is a test file to demonstrate basic file management operations in C.\n";

    // Create and write to the file
    create_and_write_file(filename, text);

    // Read and display file content
    read_file(filename);

    // Display file information
    display_file_info(filename);

    // Delete the file
    delete_file(filename);

    return 0;
}
