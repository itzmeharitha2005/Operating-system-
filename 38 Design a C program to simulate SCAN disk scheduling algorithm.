#include <stdio.h>
#include <stdlib.h>

// Function to perform SCAN Disk Scheduling Algorithm
void scan(int* requests, int num_requests, int initial_position, int disk_size, int direction) {
    int i, total_seek_time = 0;
    int distance, cur_track;
    
    // Sort the requests array to find the closest request
    for (i = 0; i < num_requests - 1; i++) {
        for (int j = i + 1; j < num_requests; j++) {
            if (requests[i] > requests[j]) {
                // Swap the values
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }
    
    // Find the initial position of the disk
    int left[num_requests], right[num_requests];
    int left_index = 0, right_index = 0;
    
    for (i = 0; i < num_requests; i++) {
        if (requests[i] < initial_position) {
            left[left_index++] = requests[i];
        } else {
            right[right_index++] = requests[i];
        }
    }

    // Calculate total seek time
    // Moving left or right based on initial direction
    if (direction == 0) {
        // Move towards the left end
        for (i = left_index - 1; i >= 0; i--) {
            cur_track = left[i];
            distance = abs(cur_track - initial_position);
            total_seek_time += distance;
            initial_position = cur_track;
        }
        
        // Move towards the right end
        for (i = 0; i < right_index; i++) {
            cur_track = right[i];
            distance = abs(cur_track - initial_position);
            total_seek_time += distance;
            initial_position = cur_track;
        }
    } else {
        // Move towards the right end first
        for (i = 0; i < right_index; i++) {
            cur_track = right[i];
            distance = abs(cur_track - initial_position);
            total_seek_time += distance;
            initial_position = cur_track;
        }

        // Move towards the left end
        for (i = left_index - 1; i >= 0; i--) {
            cur_track = left[i];
            distance = abs(cur_track - initial_position);
            total_seek_time += distance;
            initial_position = cur_track;
        }
    }

    printf("Total Seek Time: %d\n", total_seek_time);
}

int main() {
    int num_requests, disk_size, initial_position, direction;

    // Input the number of disk requests
    printf("Enter the number of disk requests: ");
    scanf("%d", &num_requests);

    // Input disk requests
    int requests[num_requests];
    printf("Enter the disk requests (track numbers):\n");
    for (int i = 0; i < num_requests; i++) {
        scanf("%d", &requests[i]);
    }

    // Input disk size
    printf("Enter the disk size (total number of tracks): ");
    scanf("%d", &disk_size);

    // Input the initial position of the disk head
    printf("Enter the initial position of the disk head: ");
    scanf("%d", &initial_position);

    // Input the direction (0 for left, 1 for right)
    printf("Enter the direction (0 for left, 1 for right): ");
    scanf("%d", &direction);

    // Call the SCAN function to calculate total seek time
    scan(requests, num_requests, initial_position, disk_size, direction);

    return 0;
}
