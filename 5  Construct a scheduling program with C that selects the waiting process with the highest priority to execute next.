#include <stdio.h>

typedef struct {
    int process_id;     // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time (execution time)
    int priority;       // Priority of the process
    int completion_time; // Completion time
    int waiting_time;   // Waiting time
    int turnaround_time; // Turnaround time
} Process;

// Function to sort the processes based on priority
void sortProcesses(Process processes[], int n) {
    Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            // If the priority of process i is higher than process j
            if (processes[i].priority > processes[j].priority || 
                (processes[i].priority == processes[j].priority && processes[i].arrival_time > processes[j].arrival_time)) {
                // Swap the processes[i] and processes[j]
                temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
}

// Function to calculate and display Priority Scheduling results
void priorityScheduling(Process processes[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;
    int time = 0; // Tracks the current time
    
    // Sort the processes based on priority
    sortProcesses(processes, n);

    // Calculate completion time for each process
    for (int i = 0; i < n; i++) {
        // Process starts execution at the current time (time)
        if (time < processes[i].arrival_time) {
            time = processes[i].arrival_time;
        }

        processes[i].completion_time = time + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;

        // Update the total waiting and turnaround times
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;

        // Update the current time to the completion time of the current process
        time = processes[i].completion_time;
    }

    // Calculate and print the average waiting time and turnaround time
    printf("\nProcess ID\tArrival Time\tBurst Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].process_id,
               processes[i].arrival_time,
               processes[i].burst_time,
               processes[i].priority,
               processes[i].completion_time,
               processes[i].turnaround_time,
               processes[i].waiting_time);
    }

    printf("\nAverage Waiting Time: %.2f", (float)total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_turnaround_time / n);
}

int main() {
    int n;

    // Accept the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Accept arrival time, burst time, and priority for each process
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;  // Assign process ID starting from 1
        printf("\nEnter arrival time, burst time, and priority for Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority (lower number means higher priority): ");
        scanf("%d", &processes[i].priority);
    }

    // Call priorityScheduling function to calculate and display the results
    priorityScheduling(processes, n);

    return 0;
}
