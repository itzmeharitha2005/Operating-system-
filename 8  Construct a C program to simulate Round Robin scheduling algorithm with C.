#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int process_id;       // Process ID
    int arrival_time;     // Arrival time
    int burst_time;       // Burst time (execution time)
    int remaining_time;   // Remaining burst time (for preemption)
    int completion_time;  // Completion time
    int waiting_time;     // Waiting time
    int turnaround_time;  // Turnaround time
} Process;

// Function to calculate and display Round Robin results
void roundRobinScheduling(Process processes[], int n, int quantum) {
    int total_waiting_time = 0, total_turnaround_time = 0;
    int completed = 0, current_time = 0;

    // Queue to simulate Round Robin scheduling
    int queue[n];
    int front = 0, rear = 0;

    // Initialize the processes and the queue
    for (int i = 0; i < n; i++) {
        processes[i].remaining_time = processes[i].burst_time;
        queue[rear++] = i;  // Add the process to the queue
    }

    // Round Robin scheduling
    while (completed < n) {
        int current_process = queue[front++];
        if (front == n) front = 0;  // Reset queue front if it exceeds the size

        // Execute the current process
        if (processes[current_process].remaining_time > quantum) {
            current_time += quantum;
            processes[current_process].remaining_time -= quantum;
        } else {
            current_time += processes[current_process].remaining_time;
            processes[current_process].remaining_time = 0;
            processes[current_process].completion_time = current_time;
            processes[current_process].turnaround_time = processes[current_process].completion_time - processes[current_process].arrival_time;
            processes[current_process].waiting_time = processes[current_process].turnaround_time - processes[current_process].burst_time;

            total_waiting_time += processes[current_process].waiting_time;
            total_turnaround_time += processes[current_process].turnaround_time;
            completed++;
        }

        // If the process still has remaining burst time, it goes back to the queue
        if (processes[current_process].remaining_time > 0) {
            queue[rear++] = current_process;
            if (rear == n) rear = 0;  // Reset queue rear if it exceeds the size
        }
    }

    // Print the results
    printf("\nProcess ID\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].process_id,
               processes[i].arrival_time,
               processes[i].burst_time,
               processes[i].completion_time,
               processes[i].turnaround_time,
               processes[i].waiting_time);
    }

    // Calculate and print the average waiting time and turnaround time
    printf("\nAverage Waiting Time: %.2f", (float)total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_turnaround_time / n);
}

int main() {
    int n, quantum;

    // Accept the number of processes and time quantum
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);

    Process processes[n];

    // Accept arrival time and burst time for each process
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;  // Assign process ID starting from 1
        printf("\nEnter arrival time and burst time for Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
    }

    // Call roundRobinScheduling function to calculate and display the results
    roundRobinScheduling(processes, n, quantum);

    return 0;
}
