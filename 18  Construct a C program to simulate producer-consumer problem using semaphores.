#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 5  // Size of the buffer
#define NUM_ITEMS 10   // Total number of items to produce/consume

// Shared buffer and associated variables
int buffer[BUFFER_SIZE];
int in = 0;  // Index for the producer to insert item
int out = 0; // Index for the consumer to remove item

// Semaphores
sem_t empty;  // Semaphore for empty slots in the buffer
sem_t full;   // Semaphore for full slots in the buffer
pthread_mutex_t mutex; // Mutex for mutual exclusion in critical section

// Producer function
void* producer(void* arg) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        // Produce an item
        int item = rand() % 100; // Random item

        // Wait for an empty slot
        sem_wait(&empty);
        
        // Wait for mutual exclusion (critical section)
        pthread_mutex_lock(&mutex);

        // Insert the item into the buffer
        buffer[in] = item;
        printf("Produced: %d at index %d\n", item, in);
        in = (in + 1) % BUFFER_SIZE; // Circular buffer

        // Release mutual exclusion
        pthread_mutex_unlock(&mutex);

        // Signal that there is one more full slot
        sem_post(&full);

        // Sleep to simulate work
        sleep(1);
    }
    return NULL;
}

// Consumer function
void* consumer(void* arg) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        // Wait for a full slot
        sem_wait(&full);

        // Wait for mutual exclusion (critical section)
        pthread_mutex_lock(&mutex);

        // Remove an item from the buffer
        int item = buffer[out];
        printf("Consumed: %d from index %d\n", item, out);
        out = (out + 1) % BUFFER_SIZE; // Circular buffer

        // Release mutual exclusion
        pthread_mutex_unlock(&mutex);

        // Signal that there is one more empty slot
        sem_post(&empty);

        // Sleep to simulate work
        sleep(1);
    }
    return NULL;
}

int main() {
    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially, all slots are empty
    sem_init(&full, 0, 0);              // Initially, no slot is full
    pthread_mutex_init(&mutex, NULL);   // Initialize mutex

    // Create producer and consumer threads
    pthread_t prod_thread, cons_thread;
    pthread_create(&prod_thread, NULL, producer, NULL);
    pthread_create(&cons_thread, NULL, consumer, NULL);

    // Wait for both threads to finish
    pthread_join(prod_thread, NULL);
    pthread_join(cons_thread, NULL);

    // Destroy semaphores and mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
