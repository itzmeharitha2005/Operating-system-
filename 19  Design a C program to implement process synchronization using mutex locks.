#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

#define NUM_THREADS 5  // Number of threads to create
#define INCREMENTS 1000  // Number of increments per thread

// Shared resource
int counter = 0;

// Mutex for synchronization
pthread_mutex_t mutex;

// Function to increment the shared counter
void* increment_counter(void* arg) {
    for (int i = 0; i < INCREMENTS; i++) {
        // Lock the mutex to enter critical section
        pthread_mutex_lock(&mutex);

        // Critical section (increment shared counter)
        counter++;

        // Unlock the mutex after completing the critical section
        pthread_mutex_unlock(&mutex);
    }

    return NULL;
}

int main() {
    pthread_t threads[NUM_THREADS];

    // Initialize mutex
    if (pthread_mutex_init(&mutex, NULL) != 0) {
        printf("Mutex initialization failed\n");
        return -1;
    }

    // Create threads
    for (int i = 0; i < NUM_THREADS; i++) {
        if (pthread_create(&threads[i], NULL, increment_counter, NULL) != 0) {
            printf("Thread creation failed\n");
            return -1;
        }
    }

    // Join threads (wait for all threads to finish)
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Destroy the mutex
    pthread_mutex_destroy(&mutex);

    // Output the final counter value
    printf("Final counter value: %d\n", counter);

    return 0;
}
