#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

// Function to implement Best Fit Memory Allocation
void bestFit(int blocks[], int m, int processes[], int n) {
    int allocation[n];

    // Initialize allocations
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;  // -1 indicates that the process is not allocated
    }

    // Traverse through all the processes and allocate memory
    for (int i = 0; i < n; i++) {
        // Find the block with the best fit (smallest available block that can accommodate the process)
        int best_fit_index = -1;
        for (int j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                if (best_fit_index == -1 || blocks[j] < blocks[best_fit_index]) {
                    best_fit_index = j;
                }
            }
        }

        // If a block is found, allocate it
        if (best_fit_index != -1) {
            allocation[i] = best_fit_index;  // Allocate the block
            blocks[best_fit_index] -= processes[i];  // Reduce the block size
        }
    }

    // Print the allocation result
    printf("\nProcess No.\tProcess Size\tBlock No.\tBlock Size\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\n", i + 1, processes[i], allocation[i] + 1, blocks[allocation[i]]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\n", i + 1, processes[i]);
        }
    }
}

int main() {
    int blocks[MAX_BLOCKS], processes[MAX_PROCESSES];
    int m, n;

    // Input number of memory blocks and processes
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    printf("Enter the size of each memory block:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blocks[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the size of each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processes[i]);
    }

    // Call the bestFit function
    bestFit(blocks, m, processes, n);

    return 0;
}
