#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

#define BUFFER_SIZE 100

int main() {
    int fd, bytesRead, bytesWritten;
    char buffer[BUFFER_SIZE];
    
    // 1. Open a file (creating it if it does not exist)
    fd = open("example.txt", O_CREAT | O_WRONLY | O_TRUNC, 0644);
    if (fd == -1) {
        perror("Failed to open file for writing");
        exit(1);
    }
    printf("File opened successfully for writing.\n");

    // 2. Write to the file
    char *textToWrite = "Hello, this is a sample file management program.\n";
    bytesWritten = write(fd, textToWrite, strlen(textToWrite));
    if (bytesWritten == -1) {
        perror("Failed to write to file");
        close(fd);
        exit(1);
    }
    printf("Successfully wrote %d bytes to file.\n", bytesWritten);

    // 3. Close the file after writing
    close(fd);
    printf("File closed successfully after writing.\n");

    // 4. Open the file again for reading
    fd = open("example.txt", O_RDONLY);
    if (fd == -1) {
        perror("Failed to open file for reading");
        exit(1);
    }
    printf("File opened successfully for reading.\n");

    // 5. Read from the file
    bytesRead = read(fd, buffer, BUFFER_SIZE - 1);
    if (bytesRead == -1) {
        perror("Failed to read from file");
        close(fd);
        exit(1);
    }

    // Null-terminate the buffer and print the content
    buffer[bytesRead] = '\0';
    printf("Read content from file: \n%s\n", buffer);

    // 6. Close the file after reading
    close(fd);
    printf("File closed successfully after reading.\n");

    // 7. Delete the file
    if (unlink("example.txt") == -1) {
        perror("Failed to delete the file");
        exit(1);
    }
    printf("File deleted successfully.\n");

    return 0;
}
