#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>

#define NUM_PHILOSOPHERS 5

// Semaphore for forks (shared resources)
sem_t forks[NUM_PHILOSOPHERS];

// Mutex for printing to avoid output interference
pthread_mutex_t print_mutex;

// Function that simulates philosopher behavior
void* philosopher(void* num) {
    int phil = *((int*)num);

    while (1) {
        // Philosopher is thinking
        printf("Philosopher %d is thinking.\n", phil);

        // Simulate thinking time
        sleep(rand() % 3);

        // Philosopher tries to pick up forks
        printf("Philosopher %d is hungry and trying to pick up forks.\n", phil);

        // Pick up the left fork
        sem_wait(&forks[phil]);

        // Pick up the right fork (use modulo to wrap around)
        sem_wait(&forks[(phil + 1) % NUM_PHILOSOPHERS]);

        // Eating
        pthread_mutex_lock(&print_mutex);  // Prevent print interference
        printf("Philosopher %d is eating.\n", phil);
        pthread_mutex_unlock(&print_mutex);

        // Simulate eating time
        sleep(rand() % 3);

        // Put down the right fork
        sem_post(&forks[(phil + 1) % NUM_PHILOSOPHERS]);

        // Put down the left fork
        sem_post(&forks[phil]);

        // Philosopher finished eating and goes back to thinking
    }

    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_numbers[NUM_PHILOSOPHERS];

    // Initialize semaphores (1 fork for each philosopher)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);  // Each fork is available
    }

    // Initialize the mutex for printing
    pthread_mutex_init(&print_mutex, NULL);

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_numbers[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, (void*)&philosopher_numbers[i]);
    }

    // Wait for philosopher threads to finish (they run forever in this simulation)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Cleanup semaphores and mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }
    pthread_mutex_destroy(&print_mutex);

    return 0;
}
