#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

// Function to implement Worst Fit Memory Allocation
void worstFit(int blocks[], int m, int processes[], int n) {
    int allocation[n];

    // Initialize allocations
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;  // -1 indicates that the process is not allocated
    }

    // Traverse through all the processes and allocate memory
    for (int i = 0; i < n; i++) {
        // Find the block with the largest size that is greater than or equal to the process size
        int max_size_index = -1;
        for (int j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                if (max_size_index == -1 || blocks[j] > blocks[max_size_index]) {
                    max_size_index = j;
                }
            }
        }

        // If a block is found, allocate it
        if (max_size_index != -1) {
            allocation[i] = max_size_index;  // Allocate the block
            blocks[max_size_index] -= processes[i];  // Reduce the block size
        }
    }

    // Print the allocation result
    printf("\nProcess No.\tProcess Size\tBlock No.\tBlock Size\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\n", i + 1, processes[i], allocation[i] + 1, blocks[allocation[i]]);
        } else {
            printf("%d\t\t%d\t\tNo
