#include <stdio.h>
#include <stdlib.h>

#define FRAME_COUNT 3  // Number of frames in memory

// Function to find the farthest page in future for replacement
int find_farthest(int frame[], int page_count, int pages[], int current_index) {
    int farthest = -1;
    int replace_index = -1;

    // Loop through all frames and find the one that will be used farthest in the future
    for (int i = 0; i < FRAME_COUNT; i++) {
        int j;
        for (j = current_index + 1; j < page_count; j++) {
            if (frame[i] == pages[j]) {
                break;  // Page is found in future, stop looking
            }
        }

        // If the page is not found in the future, replace it
        if (j == page_count) {
            return i;
        }

        // Track the page that is used farthest in the future
        if (j > farthest) {
            farthest = j;
            replace_index = i;
        }
    }

    return replace_index;
}

// Function to simulate the optimal page replacement
void optimal_page_replacement(int pages[], int page_count) {
    int frame[FRAME_COUNT];  // Array to store the pages in memory
    int page_faults = 0;     // To count the number of page faults
    int i, j;

    // Initialize the frame with -1 (indicating empty frames)
    for (i = 0; i < FRAME_COUNT; i++) {
        frame[i] = -1;
    }

    printf("Page Reference String: ");
    for (i = 0; i < page_count; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");

    // Simulate the optimal page replacement
    for (i = 0; i < page_count; i++) {
        int page = pages[i];
        int page_found = 0;

        // Check if the page is already in one of the frames
        for (j = 0; j < FRAME_COUNT; j++) {
            if (frame[j] == page) {
                page_found = 1;  // Page is already in memory, no page fault
                break;
            }
        }

        // If the page is not in memory, a page fault occurs
        if (!page_found) {
            page_faults++;

            // If there is an empty frame, load the page into the frame
            int replace_index = -1;
            for (j = 0; j < FRAME_COUNT; j++) {
                if (frame[j] == -1) {
                    replace_index = j;
                    break;
                }
            }

            // If no empty frame is found, replace the page using the optimal strategy
            if (replace_index == -1) {
                replace_index = find_farthest(frame, page_count, pages, i);
            }

            // Replace the page in the selected frame
            frame[replace_index] = page;

            // Display the current state of memory
            printf("Memory after page %d:\n", page);
            for (j = 0; j < FRAME_COUNT; j++) {
                if (frame[j] != -1) {
                    printf(" %d ", frame[j]);
                } else {
                    printf(" - ");
                }
            }
            printf("\n");
        }
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
}

int main() {
    // Example page reference string
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 3};
    int page_count = sizeof(pages) / sizeof(pages[0]);

    optimal_page_replacement(pages, page_count);

    return 0;
}
